// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/manager.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockISubstrService is a mock of ISubstrService interface.
type MockISubstrService struct {
	ctrl     *gomock.Controller
	recorder *MockISubstrServiceMockRecorder
}

// MockISubstrServiceMockRecorder is the mock recorder for MockISubstrService.
type MockISubstrServiceMockRecorder struct {
	mock *MockISubstrService
}

// NewMockISubstrService creates a new mock instance.
func NewMockISubstrService(ctrl *gomock.Controller) *MockISubstrService {
	mock := &MockISubstrService{ctrl: ctrl}
	mock.recorder = &MockISubstrServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISubstrService) EXPECT() *MockISubstrServiceMockRecorder {
	return m.recorder
}

// FindSubstr mocks base method.
func (m *MockISubstrService) FindSubstr(s string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSubstr", s)
	ret0, _ := ret[0].(string)
	return ret0
}

// FindSubstr indicates an expected call of FindSubstr.
func (mr *MockISubstrServiceMockRecorder) FindSubstr(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSubstr", reflect.TypeOf((*MockISubstrService)(nil).FindSubstr), s)
}

// MockIEmailService is a mock of IEmailService interface.
type MockIEmailService struct {
	ctrl     *gomock.Controller
	recorder *MockIEmailServiceMockRecorder
}

// MockIEmailServiceMockRecorder is the mock recorder for MockIEmailService.
type MockIEmailServiceMockRecorder struct {
	mock *MockIEmailService
}

// NewMockIEmailService creates a new mock instance.
func NewMockIEmailService(ctrl *gomock.Controller) *MockIEmailService {
	mock := &MockIEmailService{ctrl: ctrl}
	mock.recorder = &MockIEmailServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEmailService) EXPECT() *MockIEmailServiceMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockIEmailService) Check(s string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", s)
	ret0, _ := ret[0].([]string)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockIEmailServiceMockRecorder) Check(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockIEmailService)(nil).Check), s)
}

// MockIIINService is a mock of IIINService interface.
type MockIIINService struct {
	ctrl     *gomock.Controller
	recorder *MockIIINServiceMockRecorder
}

// MockIIINServiceMockRecorder is the mock recorder for MockIIINService.
type MockIIINServiceMockRecorder struct {
	mock *MockIIINService
}

// NewMockIIINService creates a new mock instance.
func NewMockIIINService(ctrl *gomock.Controller) *MockIIINService {
	mock := &MockIIINService{ctrl: ctrl}
	mock.recorder = &MockIIINServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIIINService) EXPECT() *MockIIINServiceMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockIIINService) Check(s string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", s)
	ret0, _ := ret[0].([]string)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockIIINServiceMockRecorder) Check(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockIIINService)(nil).Check), s)
}

// MockICounterService is a mock of ICounterService interface.
type MockICounterService struct {
	ctrl     *gomock.Controller
	recorder *MockICounterServiceMockRecorder
}

// MockICounterServiceMockRecorder is the mock recorder for MockICounterService.
type MockICounterServiceMockRecorder struct {
	mock *MockICounterService
}

// NewMockICounterService creates a new mock instance.
func NewMockICounterService(ctrl *gomock.Controller) *MockICounterService {
	mock := &MockICounterService{ctrl: ctrl}
	mock.recorder = &MockICounterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICounterService) EXPECT() *MockICounterServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockICounterService) Add(i int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", i)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockICounterServiceMockRecorder) Add(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockICounterService)(nil).Add), i)
}

// Get mocks base method.
func (m *MockICounterService) Get() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockICounterServiceMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockICounterService)(nil).Get))
}

// Sub mocks base method.
func (m *MockICounterService) Sub(i int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sub", i)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sub indicates an expected call of Sub.
func (mr *MockICounterServiceMockRecorder) Sub(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sub", reflect.TypeOf((*MockICounterService)(nil).Sub), i)
}
