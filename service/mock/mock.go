// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/manager.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockISubstrService is a mock of ISubstrService interface.
type MockISubstrService struct {
	ctrl     *gomock.Controller
	recorder *MockISubstrServiceMockRecorder
}

// MockISubstrServiceMockRecorder is the mock recorder for MockISubstrService.
type MockISubstrServiceMockRecorder struct {
	mock *MockISubstrService
}

// NewMockISubstrService creates a new mock instance.
func NewMockISubstrService(ctrl *gomock.Controller) *MockISubstrService {
	mock := &MockISubstrService{ctrl: ctrl}
	mock.recorder = &MockISubstrServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISubstrService) EXPECT() *MockISubstrServiceMockRecorder {
	return m.recorder
}

// FindSubstr mocks base method.
func (m *MockISubstrService) FindSubstr(s string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSubstr", s)
	ret0, _ := ret[0].(string)
	return ret0
}

// FindSubstr indicates an expected call of FindSubstr.
func (mr *MockISubstrServiceMockRecorder) FindSubstr(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSubstr", reflect.TypeOf((*MockISubstrService)(nil).FindSubstr), s)
}

// MockIEmailService is a mock of IEmailService interface.
type MockIEmailService struct {
	ctrl     *gomock.Controller
	recorder *MockIEmailServiceMockRecorder
}

// MockIEmailServiceMockRecorder is the mock recorder for MockIEmailService.
type MockIEmailServiceMockRecorder struct {
	mock *MockIEmailService
}

// NewMockIEmailService creates a new mock instance.
func NewMockIEmailService(ctrl *gomock.Controller) *MockIEmailService {
	mock := &MockIEmailService{ctrl: ctrl}
	mock.recorder = &MockIEmailServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEmailService) EXPECT() *MockIEmailServiceMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockIEmailService) Check(s string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", s)
	ret0, _ := ret[0].([]string)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockIEmailServiceMockRecorder) Check(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockIEmailService)(nil).Check), s)
}

// MockIIINService is a mock of IIINService interface.
type MockIIINService struct {
	ctrl     *gomock.Controller
	recorder *MockIIINServiceMockRecorder
}

// MockIIINServiceMockRecorder is the mock recorder for MockIIINService.
type MockIIINServiceMockRecorder struct {
	mock *MockIIINService
}

// NewMockIIINService creates a new mock instance.
func NewMockIIINService(ctrl *gomock.Controller) *MockIIINService {
	mock := &MockIIINService{ctrl: ctrl}
	mock.recorder = &MockIIINServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIIINService) EXPECT() *MockIIINServiceMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockIIINService) Check(s string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", s)
	ret0, _ := ret[0].([]string)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockIIINServiceMockRecorder) Check(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockIIINService)(nil).Check), s)
}
